# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SgS5k9B_s8blr-4hFK4udUFRivlIBgqd
"""

# Install yfinance if not already present
!pip install yfinance --quiet

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go

# Set style
sns.set_style('darkgrid')

# Define tech stocks
tech_stocks = ['AAPL', 'MSFT', 'AMZN', 'GOOG']

# Download past 5 years of daily data
data = yf.download(tech_stocks, start="2020-01-01", end="2025-01-01")['Close']

# Preview data
data.head()

# Set seaborn style
import seaborn as sns
sns.set_style('darkgrid')

# Plot Close prices over time
plt.figure(figsize=(14, 6))
for stock in tech_stocks:
    plt.plot(data[stock], label=stock)
plt.title('Tech Stocks Closing Prices (2020-2024)')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

# Calculate moving averages for AAPL
data['AAPL_20MA'] = data['AAPL'].rolling(window=20).mean()
data['AAPL_50MA'] = data['AAPL'].rolling(window=50).mean()

# Plot
plt.figure(figsize=(14, 6))
plt.plot(data['AAPL'], label='AAPL Price')
plt.plot(data['AAPL_20MA'], label='20-Day MA')
plt.plot(data['AAPL_50MA'], label='50-Day MA')
plt.title('AAPL - Price with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()

fig = go.Figure()
fig.add_trace(go.Scatter(x=data.index, y=data['AAPL'], mode='lines', name='AAPL'))
fig.add_trace(go.Scatter(x=data.index, y=data['AAPL_20MA'], mode='lines', name='20-Day MA'))
fig.add_trace(go.Scatter(x=data.index, y=data['AAPL_50MA'], mode='lines', name='50-Day MA'))
fig.update_layout(title='AAPL Interactive Stock Chart', xaxis_title='Date', yaxis_title='Price (USD)')
fig.show()

# Correlation between stocks
corr = data[tech_stocks].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation between Tech Stocks')
plt.show()

# Volatility (rolling 30-day standard deviation)
plt.figure(figsize=(14, 6))
for stock in tech_stocks:
    rolling_std = data[stock].rolling(window=30).std()
    plt.plot(rolling_std, label=stock)
plt.title('Rolling 30-Day Volatility')
plt.xlabel('Date')
plt.ylabel('Standard Deviation')
plt.legend()
plt.show()